- Introduction to Grids

The grid can be used to lay out entire web pages. 
Whereas Flexbox is mostly useful for positioning items in a one-dimensional layout, 
CSS grid is most useful for two-dimensional layouts, providing many tools for aligning and moving elements across both rows and columns.

- Creating a Grid

To set up a grid, you need to have both a grid container and grid items. 
The grid container will be a parent element that contains grid items as children and applies overarching styling and positioning to them.

To turn an HTML element into a grid container, 
you must set the element’s display property to 'grid' (for a block-level grid) or 'inline-grid' (for an inline grid). 
Then, you can assign other properties to lay out the grid.

- Creating Columns

By default, grids contain only one column. If you were to start adding items, each item would be put on a new row.

We can define the columns of our grid by using the CSS property grid-template-columns. 

.grid {
  display: grid;
  width: 500px;
  grid-template-columns: 100px 200px;
}

This property creates two changes. 
First, it defines the number of columns in the grid; in this case, there are two. 
Second, it sets the width of each column. The first column will be 100 pixels wide and the second column will be 200 pixels wide.

We can also define the size of our columns as a percentage of the entire grid’s width.

.grid {
  display: grid;
  width: 1000px;
  grid-template-columns: 20% 50%;
}

In this example, the grid is 1000 pixels wide. 
Therefore, the first column will be 200 pixels wide because it is set to be 20% of the grid’s width. 
The second column will be 500 pixels wide.

We can also mix and match these two units. 
In the example below, there are three columns of width 20 pixels, 40 pixels, and 60 pixels:

.grid {
  display: grid;
  width: 100px;
  grid-template-columns: 20px 40% 60px;
}

- Creating Rows

To specify the number and size of the rows, we are going to use the property grid-template-rows.

.grid {
  display: grid;
  width: 1000px;
  height: 500px;
  grid-template-columns: 100px 200px;
  grid-template-rows: 10% 20% 600px;
}

This grid has two columns and three rows. grid-template-rows defines the number of rows and sets each row’s height.

When using percentages in these two properties, remember that rows are defined as a percentage of the grid’s height. 
Columns are defined as a percentage of its width.

- Grid Template

The property grid-template can replace the previous two CSS properties. Both grid-template-rows and grid-template-columns are nowhere to be found in the following code!

.grid {
  display: grid;
  width: 1000px;
  height: 500px;
  grid-template: 200px 300px / 20% 10% 70%;
}

When using grid-template, the values before the slash will determine the size of each row. 
The values after the slash determine the size of each column. In this example, we’ve made two rows and three columns of varying sizes.

- Fraction

CSS Grid introduced a new relative sizing unit — fr, like fraction.

By using the fr unit, we can define the size of columns and rows as a fraction of the grid’s length and width. This unit was specifically created for use in CSS Grid. Using fr makes it easier to prevent grid items from overflowing the boundaries of the grid. Consider the code below:

.grid { 
  display: grid; 
  width: 1000px; 
  height: 400px; 
  grid-template: 2fr 1fr 1fr / 1fr 3fr 1fr; 
}

It is possible to use fr with other units as well. When this happens, each fr represents a fraction of the available space.

.grid { 
  display: grid; 
  width: 100px; 
  grid-template-columns: 1fr 60px 1fr; 
}

- Repeat

The properties that define the number of rows and columns in a grid can take a function as a value. 
repeat() is one of these functions. 

.grid {
  display: grid;
  width: 300px;
  grid-template-columns: repeat(3, 100px);
}

Repeat is particularly useful with fr. For example, repeat(5, 1fr) would split your table into five equal rows or columns.

Finally, the second parameter of repeat() can have multiple values.

grid-template-columns: repeat(2, 20px 50px)

 grid-template: repeat(3, 1fr) / 3fr 50% 1fr;

- minmax

sometimes you might want a grid to resize based on the size of your web browser.

In these situations, you might want to prevent a row or column from getting too big or too small. 
For example, if you have a 100-pixel wide image in your grid, you probably don’t want its column to get thinner than 100 pixels! 

.grid {
  display: grid;
  grid-template-columns: 100px minmax(100px, 500px) 100px;
}

no width in the .grid!

- Grid Gap

The CSS properties grid-row-gap and grid-column-gap will put blank space between every row and column in the grid.

Finally, there is a CSS property grid-gap that can set the row and column gap at the same time. 
grid-gap: 20px 10px; will set the distance between rows to 20 pixels and the distance between columns to 10 pixels. 

- Grid Items

The items placed in the grid have always taken up exactly one square. 
we can change the look of our grid by making grid items take up more than one row and one column
By manipulating both the parent and the child elements, we can create beautiful layouts with ease.

- Multiple Row Items





















