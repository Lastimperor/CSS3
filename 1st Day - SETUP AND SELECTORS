- Intro to CSS

CSS, or Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page.

- Inline Styles

it's possible to write CSS code directly within HTML code using inline styles.
To style an HTML element, you can add the style attribute directly to the opening tag. 
After you add the attribute, you can set it equal to the CSS style(s) you'd like applied to that element.

<p style="color: red;">I'm learning to code!</p>

Make sure to end the styles with a semicolon (;).

- The <style> Tag

HTML allows you to write CSS code in its own dedicated section with the <style> element.
To use the <style> element, it must be placed inside of the <head> element.

<head>
  <style>
    p {
      color: red;
      font-size: 20px;
    }
  </style>
</head>

- The .css file

Developers avoid mixing code by storing HTML and CSS code in separate files

You can create a CSS file by using the .css file name extension, like so: style.css

- Linking the CSS File

You can use the <link> element to link HTML and CSS files together. 
The <link> element must be placed within the head of the HTML file. 
It is a self-closing tag and requires three attributes:

href — like the anchor element, the value of this attribute must be the address, or path, to the CSS file.

type — this attribute describes the type of document that you are linking to (in this case, a CSS file). 
The value of this attribute should be set to text/css.

rel — this attribute describes the relationship between the HTML file and the CSS file. 
Because you are linking to a stylesheet, the value should be set to stylesheet.

<link href="https://www.codecademy.com/stylesheets/style.css" type="text/css" rel="stylesheet">

<link href="./style.css" type="text/css" rel="stylesheet">

- Tag Name

CSS can select HTML elements by using an element's tag name. 
A tag name is the word (or character) between HTML angle brackets.

In HTML, the tag for a paragraph element is <p>. 

The CSS syntax for selecting <p> elements is:

p {

}

all paragraph elements will be selected using a CSS selector. 

- Class Name

HTML elements can also have attributes. One common attribute is the class attribute.
It's also possible to select an element by its class attribute.

For example, consider the following HTML:

<p class="brand">Sole Shoe Company</p>

To select this element using CSS, we could use the following CSS selector:

.brand {

}

We'll see in a later exercise why using .title overrides the h1 selector.

- Multiple Classes

it's possible to add more than one class name to an HTML element's class attribute.


You could write two CSS classes like so:

.green {
  color: green;
}

.bold {
  font-weight: bold;
}

Then, you could include both of these classes on one HTML element like this:

<h1 class="green bold"> ... </h1>

This enables us to mix and match CSS classes to create many unique styles without writing a custom class for every style combination needed.

- ID Name

If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element.

<h1 id="large-title"> ... </h1>

 CSS can select HTML elements by their id attribute. 
 
 #large-title {

}

- Classes and IDs

CSS classes are meant to be reused over many elements. 
By writing CSS classes, you can style elements in a variety of ways by mixing classes on HTML elements.

ID is meant to style only one element. IDs override the styles of tags and classes, 
they should be used sparingly and only on elements that need to always appear the same.

- Specificity

Specificity is the order by which the browser decides which CSS styles will be displayed. 
A best practice in CSS is to style elements while using the lowest degree of specificity.
IDs are the most specific selector in CSS, followed by classes, and finally, tags.

- Chaining Selectors

When writing CSS rules, it's possible to require an HTML element to have two or more CSS selectors at the same time.

This is done by combining multiple selectors, which we will refer to as chaining. 

if there was a .special class for h1 elements, the CSS would look like:

h1.special {

}

The code above would select only the h1 elements that have a class of special. 
If a p element also had a class of special, the rule in the example would not style the paragraph.

- Nested Elements

CSS also supports selecting elements that are nested within other HTML elements.

<ul class='main-list'>
  <li> ... </li>
  <li> ... </li>
  <li> ... </li>
</ul>

The nested <li> elements are selected with the following CSS:

.main-list li {

}

.description h5 {
  color: teal;
}

- Chaining and Specificity

Adding more than one tag, class, or ID to a CSS selector increases the specificity of the CSS selector.

For instance, consider the following CSS:

p {
  color: blue;
}


.main p {
  color: red;
}

Both of these CSS rules define what a p element should look like. 
Since .main p has a class and a p tag as its selector, only the p elements inside the .main element will appear red. 

- Important

There is one thing that is even more specific than IDs: !important. 

!important can be applied to specific attributes instead of full rules. 
It will override any style no matter how specific it is. 

The syntax of !important in CSS looks like this:

p {
  color: blue !important;
}


.main p {
  color: red;
}

all p elements will appear blue.

- Multiple Selectors

In order to make CSS more concise, it's possible to add CSS styles to multiple CSS selectors all at once. 
This prevents writing repetitive code.

the following code has repetitive style attributes:

h1 {
  font-family: Georgia;
}

.menu {
  font-family: Georgia;
}

we can separate the selectors by a comma to apply the same style to both, like this:

h1, 
.menu {
  font-family: Georgia;
}







 







