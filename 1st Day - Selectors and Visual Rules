- Intro to CSS

CSS, or Cascading Style Sheets, is a language that web developers use to style the HTML content on a web page.

- Inline Styles

it's possible to write CSS code directly within HTML code using inline styles.
To style an HTML element, you can add the style attribute directly to the opening tag. 
After you add the attribute, you can set it equal to the CSS style(s) you'd like applied to that element.

<p style="color: red;">I'm learning to code!</p>

Make sure to end the styles with a semicolon (;).

- The <style> Tag

HTML allows you to write CSS code in its own dedicated section with the <style> element.
To use the <style> element, it must be placed inside of the <head> element.

<head>
  <style>
    p {
      color: red;
      font-size: 20px;
    }
  </style>
</head>

- The .css file

Developers avoid mixing code by storing HTML and CSS code in separate files

You can create a CSS file by using the .css file name extension, like so: style.css

- Linking the CSS File

You can use the <link> element to link HTML and CSS files together. 
The <link> element must be placed within the head of the HTML file. 
It is a self-closing tag and requires three attributes:

href — like the anchor element, the value of this attribute must be the address, or path, to the CSS file.

type — this attribute describes the type of document that you are linking to (in this case, a CSS file). 
The value of this attribute should be set to text/css.

rel — this attribute describes the relationship between the HTML file and the CSS file. 
Because you are linking to a stylesheet, the value should be set to stylesheet.

<link href="https://www.codecademy.com/stylesheets/style.css" type="text/css" rel="stylesheet">

<link href="./style.css" type="text/css" rel="stylesheet">

- Tag Name

CSS can select HTML elements by using an element's tag name. 
A tag name is the word (or character) between HTML angle brackets.

In HTML, the tag for a paragraph element is <p>. 

The CSS syntax for selecting <p> elements is:

p {

}

all paragraph elements will be selected using a CSS selector. 

- Class Name

HTML elements can also have attributes. One common attribute is the class attribute.
It's also possible to select an element by its class attribute.

For example, consider the following HTML:

<p class="brand">Sole Shoe Company</p>

To select this element using CSS, we could use the following CSS selector:

.brand {

}

We'll see in a later exercise why using .title overrides the h1 selector.

- Multiple Classes

it's possible to add more than one class name to an HTML element's class attribute.


You could write two CSS classes like so:

.green {
  color: green;
}

.bold {
  font-weight: bold;
}

Then, you could include both of these classes on one HTML element like this:

<h1 class="green bold"> ... </h1>

This enables us to mix and match CSS classes to create many unique styles without writing a custom class for every style combination needed.

- ID Name

If an HTML element needs to be styled uniquely (no matter what classes are applied to the element), we can add an ID to the element.

<h1 id="large-title"> ... </h1>

 CSS can select HTML elements by their id attribute. 
 
 #large-title {

}

- Classes and IDs

CSS classes are meant to be reused over many elements. 
By writing CSS classes, you can style elements in a variety of ways by mixing classes on HTML elements.

ID is meant to style only one element. IDs override the styles of tags and classes, 
they should be used sparingly and only on elements that need to always appear the same.

- Specificity

Specificity is the order by which the browser decides which CSS styles will be displayed. 
A best practice in CSS is to style elements while using the lowest degree of specificity.
IDs are the most specific selector in CSS, followed by classes, and finally, tags.

- Chaining Selectors

When writing CSS rules, it's possible to require an HTML element to have two or more CSS selectors at the same time.

This is done by combining multiple selectors, which we will refer to as chaining. 

if there was a .special class for h1 elements, the CSS would look like:

h1.special {

}

The code above would select only the h1 elements that have a class of special. 
If a p element also had a class of special, the rule in the example would not style the paragraph.

- Nested Elements

CSS also supports selecting elements that are nested within other HTML elements.

<ul class='main-list'>
  <li> ... </li>
  <li> ... </li>
  <li> ... </li>
</ul>

The nested <li> elements are selected with the following CSS:

.main-list li {

}

.description h5 {
  color: teal;
}

- Chaining and Specificity

Adding more than one tag, class, or ID to a CSS selector increases the specificity of the CSS selector.

For instance, consider the following CSS:

p {
  color: blue;
}


.main p {
  color: red;
}

Both of these CSS rules define what a p element should look like. 
Since .main p has a class and a p tag as its selector, only the p elements inside the .main element will appear red. 

- Important

There is one thing that is even more specific than IDs: !important. 

!important can be applied to specific attributes instead of full rules. 
It will override any style no matter how specific it is. 

The syntax of !important in CSS looks like this:

p {
  color: blue !important;
}


.main p {
  color: red;
}

all p elements will appear blue.

- Multiple Selectors

In order to make CSS more concise, it's possible to add CSS styles to multiple CSS selectors all at once. 
This prevents writing repetitive code.

the following code has repetitive style attributes:

h1 {
  font-family: Georgia;
}

.menu {
  font-family: Georgia;
}

we can separate the selectors by a comma to apply the same style to both, like this:

h1, 
.menu {
  font-family: Georgia;
}



- CSS Structure

To style an HTML element using CSS, you need to write a CSS declaration inside the body of a CSS selector.

h1 {
  color: blue;
}

This line is referred to as a CSS declaration. CSS declarations consist of a property and a value.

Property — the property you'd like to style of that element (i.e., size, color, etc.).

Value — the value of the property (i.e., 18px for size, blue for color, etc.).

- Font Family

Font refers to the technical term typeface, or font family.

To change the typeface of text on your web page, you can use the font-family property.

h1 {
  font-family: Garamond;
}


When setting typefaces on a web page, keep the following points in mind:

1. The font specified in a stylesheet must be installed on a user's computer in order for that font to display when a user visits the web page.
2. The default typeface for all HTML elements is Times New Roman. 
3. It's a good practice to limit the number of typefaces used on a web page to 2 or 3. This helps the page load faster in some cases and is usually a good design decision.
4. When the name of a typeface consists of more than one word, it's a best practice to enclose the typeface's name in quotes, like so:

h1 {
  font-family: "Courier New";
}

- Font Size

Often times, different sections of a web page are highlighted by modifying the font size.

To change the size of text on your web page, you can use the font-size property.

p {
  font-size: 18px;
}


- Font Weight

In CSS, the font-weight property controls how bold or thin text appears.

p {
  font-weight: bold;
}

The font-weight property has a another value: normal, essentially shutting off bold for that element.

- Text Align

To align text we can use the text-align property. The text-align property will align text to the element that holds it, otherwise known as its parent.

h1 {
  text-align: right;
}

The text-align property can be set to one of the following three values:

left — aligns text to the left hand side of its parent element, which in this case is the browser.
center — centers text inside of its parent element.
right — aligns text to the right hand side of its parent element.

- Color

it's important to make two distinctions about color. 

Foreground color is the color that an element appears in. 
For example, when a heading is styled to appear green, the foreground color of the heading has been styled.

Conversely, when a heading is styled so that its background appears yellow, the background color of the heading has been styled.

In CSS, these two design aspects can be styled with the following two properties:

color: this property styles an element's foreground color
background-color: this property styles an element's background color

h1 {
  color: red;
  background-color: blue;
}

- Opacity

Opacity is the measure of how transparent an element is. 
It's measured from 0 to 1, with 1 representing 100%, or fully visible and opaque, and 0 representing 0%, or fully invisible.

.overlay {
  opacity: 0.5;
}

- Background Image

This is done through the CSS property background-image. Its syntax looks like this:

.main-banner {
  background-image: url("https://www.example.com/image.jpg");
}

The value provided to background-image is a url.

To link to an image inside an existing project, you must provide a relative file path. 

.main-banner {
  background-image: url("images/mountains.jpg");
}







